input AMPLIFY {
  globalAuthRule: AuthRule = {allow: public}
}

type Product @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  description: String
  image: String!
  images: [String!]!
  options: [String!]
  avgRating: Float
  ratings: Int
  price: Float!
  oldPrice: Float
}

type CartProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  userSub: String!
  quantity: Int!
  option: String
  productId: ID!
  product: Product @hasOne(fields: ["productId"])
}

type OrderProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int!
  option: String
  productID: ID!
  product: Product @hasOne(fields: ["productID"])
  orderID: ID!
  order: Order @hasOne(fields: ["orderID"])
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  userSub: String!
  fullName: String!
  phoneNumber: String
  country: String
  city: String
  address: String
}

type Message @model @auth(rules: [{allow: public}]) {
  id: ID!
  content: String!
  userID: ID @index(name: "byUser")
  chatroomID: ID @index(name: "byChatRoom")
}

type ChatRoom @model @auth(rules: [{allow: public}]) {
  id: ID!
  newMessages: Int
  LastMessage: Message @hasOne(fields: ["id"])
  Messages: [Message] @hasMany(indexName: "byChatRoom", fields: ["id"])
  ChatRoomUsers: [ChatRoomUser] @hasMany(indexName: "byChatRoom", fields: ["id"])
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  imageUri: String
  status: String
  Messages: [Message] @hasMany(indexName: "byUser", fields: ["id"])
  chatrooms: [ChatRoomUser] @hasMany(indexName: "byUser", fields: ["id"])
}

type ChatRoomUser @model @auth(rules: [{allow: public}]) {
  id: ID!
  chatroomID: ID! @index(name: "byChatRoom", sortKeyFields: ["userID"])
  userID: ID! @index(name: "byUser", sortKeyFields: ["chatroomID"])
  chatroom: ChatRoom! @belongsTo(fields: ["chatroomID"])
  user: User! @belongsTo(fields: ["userID"])
} 

type Book
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  image: String
  author: String
  featured: Boolean
  price: Float
  orders: [BookOrder] @hasMany(indexName: "byBook", fields: ["id"]) 
}

type BookOrder
  @model(queries: null, subscriptions: null)
  @auth(
    rules: [
      # allow admins to create bookorders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  # @primaryKey
  book_id: ID!  @index(name: "byBook", sortKeyFields: ["order_id"])
  order_id: ID! @index(name: "byOrder", sortKeyFields: ["book_id"])
  book: Book @belongsTo(fields: ["book_id"])
  order: UserOrder @belongsTo(fields: ["order_id"])
}

type UserOrder
  @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  )
   {
  id: ID!
  # @primaryKey
  user: String! @index(name: "byUser")
  date: String
  total: Float
  books: [BookOrder] @hasMany(indexName: "byOrder", fields: ["id"])
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
  address: String
}

# type Mutation {
#   processOrder(input: ProcessOrderInput!): OrderStatus
#     @function(name: "processPayment-${env}")
#     @function(name: "createOrder-${env}")
# }
